/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import static CodigosAuxiliares.GeraListas.*;
import Persistencia.ConsultaDAO;
import Persistencia.ExcluirDAO;
import Persistencia.IncluirEditarDAO;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Objetos.ClienteCnh;
import Objetos.Instrutor;
import Objetos.Secretario;
import Objetos.Aula;
import Objetos.Veiculo;
import static Telas.Quadro.ghj;
import java.util.GregorianCalendar;
import static javax.swing.JOptionPane.YES_NO_OPTION;

/**
 *
 * @author Pedrinho
 */
public class Consulta extends javax.swing.JFrame {

    /**
     * Creates new form Consulta
     *
     * @param i
     */
    String message = "Tem certeza que deseja excluir?";
    String title = "Confirmação";
    Date hoje = new Date();

    public Consulta(int i) throws SQLException {
        initComponents();
        this.setExtendedState(Consulta.MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        tab_consulta.setSelectedIndex(i);
        geraListaAula();
        geraListaCli();
        geraListaInst();
        geraListaVei();
        atualizarTabCliente();
        atualizarTabAula();
        atualizarTabInstrutor();
        atualizarTabVeiculo();
        atualizarTabSecretario();
        IncluirEditarDAO iedao = new IncluirEditarDAO();
        ghj.setTime(hoje);
        if (ghj.get(GregorianCalendar.DAY_OF_YEAR) == 1) {
            iedao.editarDoc("NÃO");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab_consulta = new javax.swing.JTabbedPane();
        sp_cliente = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tb_cliente = new javax.swing.JTable();
        bt_excluirCliente = new javax.swing.JButton();
        bt_editarCliente = new javax.swing.JButton();
        bt_addAula = new javax.swing.JButton();
        bt_concluir = new javax.swing.JButton();
        bt_addAluguel = new javax.swing.JButton();
        bt_debitar = new javax.swing.JButton();
        sp_instrutor = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tb_instrutor = new javax.swing.JTable();
        bt_excluirInstrutor = new javax.swing.JButton();
        bt_editarInstrutor = new javax.swing.JButton();
        sp_secretario = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tb_secretario = new javax.swing.JTable();
        bt_excluirSecretario = new javax.swing.JButton();
        bt_editarSecretario = new javax.swing.JButton();
        sp_veiculo = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tb_veiculo = new javax.swing.JTable();
        bt_excluirVeiculo = new javax.swing.JButton();
        bt_editarVeiculo = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        sp_aula = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tb_aula = new javax.swing.JTable();
        bt_excluirAula = new javax.swing.JButton();
        bt_editarAula = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tab_consulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tab_consultaKeyPressed(evt);
            }
        });

        jPanel8.setLayout(null);

        jScrollPane10.setAutoscrolls(true);

        tb_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "RG", "Categoria", "Data Nasc.", "Celular", "Sexo", "Aulas Restantes", "Aulas Feitas", "Orcamento", "Valor Pago", "Concluido", "Endereco", "Data Cadastro", "Pagamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_cliente.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_cliente.setColumnSelectionAllowed(true);
        tb_cliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_cliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_clienteKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(tb_cliente);
        tb_cliente.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tb_cliente.getColumnModel().getColumnCount() > 0) {
            tb_cliente.getColumnModel().getColumn(0).setResizable(false);
            tb_cliente.getColumnModel().getColumn(0).setPreferredWidth(30);
            tb_cliente.getColumnModel().getColumn(1).setPreferredWidth(270);
            tb_cliente.getColumnModel().getColumn(2).setPreferredWidth(150);
            tb_cliente.getColumnModel().getColumn(3).setPreferredWidth(130);
            tb_cliente.getColumnModel().getColumn(4).setPreferredWidth(100);
            tb_cliente.getColumnModel().getColumn(5).setPreferredWidth(100);
            tb_cliente.getColumnModel().getColumn(6).setPreferredWidth(120);
            tb_cliente.getColumnModel().getColumn(7).setPreferredWidth(100);
            tb_cliente.getColumnModel().getColumn(8).setPreferredWidth(110);
            tb_cliente.getColumnModel().getColumn(9).setPreferredWidth(110);
            tb_cliente.getColumnModel().getColumn(10).setPreferredWidth(110);
            tb_cliente.getColumnModel().getColumn(11).setPreferredWidth(65);
            tb_cliente.getColumnModel().getColumn(12).setResizable(false);
            tb_cliente.getColumnModel().getColumn(12).setPreferredWidth(65);
            tb_cliente.getColumnModel().getColumn(13).setPreferredWidth(400);
            tb_cliente.getColumnModel().getColumn(14).setPreferredWidth(100);
            tb_cliente.getColumnModel().getColumn(15).setResizable(false);
            tb_cliente.getColumnModel().getColumn(15).setPreferredWidth(150);
        }

        jPanel8.add(jScrollPane10);
        jScrollPane10.setBounds(10, 0, 1350, 590);

        bt_excluirCliente.setText("Excluir");
        bt_excluirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirClienteActionPerformed(evt);
            }
        });
        jPanel8.add(bt_excluirCliente);
        bt_excluirCliente.setBounds(10, 610, 130, 30);

        bt_editarCliente.setText("Editar");
        bt_editarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_editarClienteActionPerformed(evt);
            }
        });
        jPanel8.add(bt_editarCliente);
        bt_editarCliente.setBounds(150, 610, 130, 30);

        bt_addAula.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        bt_addAula.setText("Adicionar Aulas");
        bt_addAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_addAulaActionPerformed(evt);
            }
        });
        jPanel8.add(bt_addAula);
        bt_addAula.setBounds(420, 610, 140, 30);

        bt_concluir.setText("Concluir");
        bt_concluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_concluirActionPerformed(evt);
            }
        });
        jPanel8.add(bt_concluir);
        bt_concluir.setBounds(290, 610, 120, 30);

        bt_addAluguel.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        bt_addAluguel.setText("Adicionar Aluguel");
        bt_addAluguel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_addAluguelActionPerformed(evt);
            }
        });
        jPanel8.add(bt_addAluguel);
        bt_addAluguel.setBounds(570, 610, 130, 30);

        bt_debitar.setText("Debitar");
        bt_debitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_debitarActionPerformed(evt);
            }
        });
        jPanel8.add(bt_debitar);
        bt_debitar.setBounds(710, 610, 130, 30);

        sp_cliente.setViewportView(jPanel8);

        tab_consulta.addTab("Clientes", sp_cliente);

        jPanel3.setLayout(null);

        tb_instrutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Data Nasc.", "Credencial", "Data Pª CNH", "Aulas Dadas", "Celular", "RG", "CTPS", "Data Admissão", "Diretor", "Sexo", "Endereço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_instrutor.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_instrutor.setColumnSelectionAllowed(true);
        tb_instrutor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_instrutor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_instrutor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_instrutorKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(tb_instrutor);
        tb_instrutor.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tb_instrutor.getColumnModel().getColumnCount() > 0) {
            tb_instrutor.getColumnModel().getColumn(0).setResizable(false);
            tb_instrutor.getColumnModel().getColumn(0).setPreferredWidth(30);
            tb_instrutor.getColumnModel().getColumn(1).setPreferredWidth(270);
            tb_instrutor.getColumnModel().getColumn(2).setPreferredWidth(150);
            tb_instrutor.getColumnModel().getColumn(3).setPreferredWidth(130);
            tb_instrutor.getColumnModel().getColumn(4).setPreferredWidth(130);
            tb_instrutor.getColumnModel().getColumn(5).setPreferredWidth(100);
            tb_instrutor.getColumnModel().getColumn(6).setPreferredWidth(110);
            tb_instrutor.getColumnModel().getColumn(7).setPreferredWidth(150);
            tb_instrutor.getColumnModel().getColumn(8).setPreferredWidth(130);
            tb_instrutor.getColumnModel().getColumn(9).setPreferredWidth(100);
            tb_instrutor.getColumnModel().getColumn(10).setPreferredWidth(100);
            tb_instrutor.getColumnModel().getColumn(11).setPreferredWidth(100);
            tb_instrutor.getColumnModel().getColumn(12).setPreferredWidth(100);
            tb_instrutor.getColumnModel().getColumn(13).setPreferredWidth(400);
        }

        jPanel3.add(jScrollPane11);
        jScrollPane11.setBounds(10, 0, 1340, 590);

        bt_excluirInstrutor.setText("Excluir");
        bt_excluirInstrutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirInstrutorActionPerformed(evt);
            }
        });
        jPanel3.add(bt_excluirInstrutor);
        bt_excluirInstrutor.setBounds(10, 610, 90, 30);

        bt_editarInstrutor.setText("Editar");
        bt_editarInstrutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_editarInstrutorActionPerformed(evt);
            }
        });
        jPanel3.add(bt_editarInstrutor);
        bt_editarInstrutor.setBounds(120, 610, 90, 30);

        sp_instrutor.setViewportView(jPanel3);

        tab_consulta.addTab("Instrutores(as)", sp_instrutor);

        jPanel4.setLayout(null);

        tb_secretario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Data Nasc.", "Celular", "RG", "CTPS", "Data Admissão", "Sexo", "Endereço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_secretario.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_secretario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_secretario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_secretario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_secretarioKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(tb_secretario);
        if (tb_secretario.getColumnModel().getColumnCount() > 0) {
            tb_secretario.getColumnModel().getColumn(0).setResizable(false);
            tb_secretario.getColumnModel().getColumn(0).setPreferredWidth(30);
            tb_secretario.getColumnModel().getColumn(1).setPreferredWidth(300);
            tb_secretario.getColumnModel().getColumn(2).setPreferredWidth(150);
            tb_secretario.getColumnModel().getColumn(3).setPreferredWidth(100);
            tb_secretario.getColumnModel().getColumn(4).setPreferredWidth(110);
            tb_secretario.getColumnModel().getColumn(5).setPreferredWidth(130);
            tb_secretario.getColumnModel().getColumn(6).setPreferredWidth(100);
            tb_secretario.getColumnModel().getColumn(7).setPreferredWidth(100);
            tb_secretario.getColumnModel().getColumn(8).setPreferredWidth(110);
            tb_secretario.getColumnModel().getColumn(9).setPreferredWidth(400);
        }

        jPanel4.add(jScrollPane12);
        jScrollPane12.setBounds(10, 0, 1340, 590);

        bt_excluirSecretario.setText("Excluir");
        bt_excluirSecretario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirSecretarioActionPerformed(evt);
            }
        });
        jPanel4.add(bt_excluirSecretario);
        bt_excluirSecretario.setBounds(10, 610, 90, 30);

        bt_editarSecretario.setText("Editar");
        bt_editarSecretario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_editarSecretarioActionPerformed(evt);
            }
        });
        jPanel4.add(bt_editarSecretario);
        bt_editarSecretario.setBounds(120, 610, 90, 30);

        sp_secretario.setViewportView(jPanel4);

        tab_consulta.addTab("Secretários(as)", sp_secretario);

        jPanel5.setLayout(null);

        tb_veiculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Placa", "Cor", "Modelo", "Validade", "Ano", "Doc. Pago", "Tipo", "RENAVAM", "CHASSI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_veiculo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tb_veiculo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_veiculo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_veiculoKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(tb_veiculo);
        if (tb_veiculo.getColumnModel().getColumnCount() > 0) {
            tb_veiculo.getColumnModel().getColumn(0).setPreferredWidth(2);
        }

        jPanel5.add(jScrollPane13);
        jScrollPane13.setBounds(10, 0, 1340, 590);

        bt_excluirVeiculo.setText("Excluir");
        bt_excluirVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirVeiculoActionPerformed(evt);
            }
        });
        jPanel5.add(bt_excluirVeiculo);
        bt_excluirVeiculo.setBounds(10, 610, 90, 30);

        bt_editarVeiculo.setText("Editar");
        bt_editarVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_editarVeiculoActionPerformed(evt);
            }
        });
        jPanel5.add(bt_editarVeiculo);
        bt_editarVeiculo.setBounds(120, 610, 90, 30);

        jButton1.setText("Pagar Doc.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);
        jButton1.setBounds(230, 610, 100, 30);

        sp_veiculo.setViewportView(jPanel5);

        tab_consulta.addTab("Veículos", sp_veiculo);

        jPanel1.setLayout(null);

        tb_aula.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Data", "Horario", "Veiculo", "Instrutor", "Cliente", "Concluida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_aula.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_aula.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_aula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_aulaKeyPressed(evt);
            }
        });
        jScrollPane14.setViewportView(tb_aula);
        if (tb_aula.getColumnModel().getColumnCount() > 0) {
            tb_aula.getColumnModel().getColumn(0).setResizable(false);
            tb_aula.getColumnModel().getColumn(0).setPreferredWidth(2);
            tb_aula.getColumnModel().getColumn(5).setPreferredWidth(300);
        }

        jPanel1.add(jScrollPane14);
        jScrollPane14.setBounds(10, 0, 1340, 590);

        bt_excluirAula.setText("Excluir");
        bt_excluirAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirAulaActionPerformed(evt);
            }
        });
        jPanel1.add(bt_excluirAula);
        bt_excluirAula.setBounds(10, 610, 90, 30);

        bt_editarAula.setText("Editar");
        bt_editarAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_editarAulaActionPerformed(evt);
            }
        });
        jPanel1.add(bt_editarAula);
        bt_editarAula.setBounds(120, 610, 90, 30);

        sp_aula.setViewportView(jPanel1);

        tab_consulta.addTab("Aulas", sp_aula);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tab_consulta, javax.swing.GroupLayout.DEFAULT_SIZE, 1365, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab_consulta, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_editarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_editarClienteActionPerformed
        try {
            // TODO add your handling code here:
            editarCliente();
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_editarClienteActionPerformed

    private void bt_editarAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_editarAulaActionPerformed

        try {
            // TODO add your handling code here:
            editarAula();
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_editarAulaActionPerformed

    private void bt_excluirVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_excluirVeiculoActionPerformed

        try {
            // TODO add your handling code here:
            excluirVeiculo();
        } catch (SQLException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_excluirVeiculoActionPerformed

    private void bt_editarVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_editarVeiculoActionPerformed
        try {
            // TODO add your handling code here:
            editarVeiculo();
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_editarVeiculoActionPerformed

    private void bt_excluirAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_excluirAulaActionPerformed

        try {
            // TODO add your handling code here:
            excluirAula();
        } catch (SQLException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_excluirAulaActionPerformed

    private void bt_editarSecretarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_editarSecretarioActionPerformed
        try {
            // TODO add your handling code here:
            editarSecretario();
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_editarSecretarioActionPerformed

    private void bt_excluirSecretarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_excluirSecretarioActionPerformed

        try {
            // TODO add your handling code here:
            excluirSecretario();
        } catch (SQLException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_excluirSecretarioActionPerformed

    private void bt_excluirInstrutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_excluirInstrutorActionPerformed

        try {
            // TODO add your handling code here:
            excluirInstrutor();
        } catch (SQLException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bt_excluirInstrutorActionPerformed

    private void bt_editarInstrutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_editarInstrutorActionPerformed
        try {
            // TODO add your handling code here:
            editarInstrutor();
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_editarInstrutorActionPerformed

    private void bt_excluirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_excluirClienteActionPerformed

        try {
            // TODO add your handling code here:
            excluirCliente();
        } catch (SQLException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_bt_excluirClienteActionPerformed

    private void bt_addAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_addAulaActionPerformed
        if (tb_cliente.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um cliente para adicionar aulas");
        } else
        try {
            // TODO add your handling code here:
            int qnt = Integer.parseInt(JOptionPane.showInputDialog("Quantas aulas deseja adicionar?"));
            adicionarAulas(qnt);
        } catch (ParseException ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_addAulaActionPerformed

    private void tb_clienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_clienteKeyPressed

        // TODO add your handling code here:
        if (evt.getKeyCode() == 127) {

            try {
                // TODO add your handling code here:
                excluirCliente();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_tb_clienteKeyPressed

    private void tb_instrutorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_instrutorKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 127) {

            try {
                // TODO add your handling code here:
                excluirInstrutor();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_tb_instrutorKeyPressed

    private void tb_secretarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_secretarioKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 127) {

            try {
                excluirSecretario();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_tb_secretarioKeyPressed

    private void tb_veiculoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_veiculoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 127) {

            try {
                excluirVeiculo();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_tb_veiculoKeyPressed

    private void tb_aulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_aulaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 127) {

            try {
                excluirAula();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_tb_aulaKeyPressed

    private void bt_concluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_concluirActionPerformed

        if (0 == JOptionPane.showConfirmDialog(null, "Apenas confirme a solicitação caso tenha certeza.\nApós a conclusão, não é possível voltar atrás", "Confirmação", YES_NO_OPTION)) {
            try {
                concluirCliente();
                atualizarTabCliente();
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_bt_concluirActionPerformed

    private void bt_addAluguelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_addAluguelActionPerformed
        // TODO add your handling code here:
        if (0 == JOptionPane.showConfirmDialog(null, "Apenas confirme a solicitação caso tenha certeza.", "Confirmação", YES_NO_OPTION)) {
            try {
                adicionarAluguel();
                atualizarTabCliente();
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_bt_addAluguelActionPerformed

    private void bt_debitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_debitarActionPerformed
        // TODO add your handling code here:
        double qnt = Double.parseDouble(JOptionPane.showInputDialog("Quanto deseja debitar?"));

        try {
            debitarCliente(qnt);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_bt_debitarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            // TODO add your handling code here:
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            iedao.editarDoc("SIM");
            JOptionPane.showMessageDialog(null, "Informação alterada com sucesso!");
            atualizarTabVeiculo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void tab_consultaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tab_consultaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==116) {
            try {
                atualizarTabAula();
                atualizarTabCliente();
                atualizarTabInstrutor();
                atualizarTabSecretario();
                atualizarTabVeiculo();
            } catch (SQLException ex) {
                Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tab_consultaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Consulta(0).setVisible(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_addAluguel;
    private javax.swing.JButton bt_addAula;
    private javax.swing.JButton bt_concluir;
    private javax.swing.JButton bt_debitar;
    private javax.swing.JButton bt_editarAula;
    private javax.swing.JButton bt_editarCliente;
    private javax.swing.JButton bt_editarInstrutor;
    private javax.swing.JButton bt_editarSecretario;
    private javax.swing.JButton bt_editarVeiculo;
    private javax.swing.JButton bt_excluirAula;
    private javax.swing.JButton bt_excluirCliente;
    private javax.swing.JButton bt_excluirInstrutor;
    private javax.swing.JButton bt_excluirSecretario;
    private javax.swing.JButton bt_excluirVeiculo;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane sp_aula;
    private javax.swing.JScrollPane sp_cliente;
    private javax.swing.JScrollPane sp_instrutor;
    private javax.swing.JScrollPane sp_secretario;
    private javax.swing.JScrollPane sp_veiculo;
    public javax.swing.JTabbedPane tab_consulta;
    private javax.swing.JTable tb_aula;
    private javax.swing.JTable tb_cliente;
    private javax.swing.JTable tb_instrutor;
    private javax.swing.JTable tb_secretario;
    private javax.swing.JTable tb_veiculo;
    // End of variables declaration//GEN-END:variables

    //Atualizar tabelas
    public void atualizarTabCliente() throws SQLException {
        geraListaCli();
        DefaultTableModel mp1 = (DefaultTableModel) tb_cliente.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_cliente.getModel()).removeRow(l - 1);
                l--;
            }
        }

        DefaultTableModel mp = (DefaultTableModel) tb_cliente.getModel();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        for (ClienteCnh obj : listCli) {
            String Coluna0 = obj.getId() + "";
            String Coluna1 = obj.getNome();
            String Coluna2 = obj.getCpf();
            String Coluna3 = obj.getRg();
            String Coluna4 = obj.getCatPretendida();
            Date date = obj.getDataNasc();
            String Coluna5 = format.format(date);
            String Coluna6 = obj.getCelular();
            String Coluna7 = obj.getSexo();
            String Coluna8 = obj.getQntAulasPossuidas() + "";
            String Coluna9 = obj.getQntAulasFeitas() + "";
            String Coluna10 = obj.getOrcamento() + "";
            String Coluna11 = obj.getValorPago() + "";
            String Coluna12;
            if (obj.isConcluido()) {
                Coluna12 = "SIM";
            } else {
                Coluna12 = "NÃO";
            }
            String Coluna13 = obj.getEnd();
            date = obj.getDataCadastro();
            String Coluna14 = format.format(date);
            String Coluna15 = obj.getFormaPagamento();

            mp.addRow(new String[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4, Coluna5, Coluna6, Coluna7, Coluna8, Coluna9, Coluna10, Coluna11, Coluna12, Coluna13, Coluna14, Coluna15});
        }
        tb_cliente.setAutoCreateRowSorter(true);
    }

    public void atualizarTabInstrutor() throws SQLException {
        geraListaInst();
        DefaultTableModel mp1 = (DefaultTableModel) tb_instrutor.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_instrutor.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_instrutor.getModel();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        for (Instrutor obj : listInst) {
            int Coluna0 = obj.getId();
            String Coluna1 = obj.getNome();
            String Coluna2 = obj.getCpf();
            Date date = obj.getDataNasc();
            String Coluna3 = format.format(date);
            String Coluna4 = obj.getCredencial();
            date = obj.getDataPCnh();
            String Coluna5 = format.format(date);
            int Coluna6 = obj.getAulasDadas();
            String Coluna7 = obj.getCelular();
            String Coluna8 = obj.getRg();
            String Coluna9 = obj.getCtps();
            date = obj.getDataAdmissao();
            String Coluna10 = format.format(date);
            String Coluna11 = obj.getDiretor();
            String Coluna12 = obj.getSexo();
            String Coluna13 = obj.getEnd();
            mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4, Coluna5, Coluna6, Coluna7, Coluna8, Coluna9, Coluna10, Coluna11, Coluna12, Coluna13});
        }

        tb_instrutor.setAutoCreateRowSorter(true);
    }

    public void atualizarTabSecretario() {
        DefaultTableModel mp1 = (DefaultTableModel) tb_secretario.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_secretario.getModel()).removeRow(l - 1);
                l--;
            }
        }
        try {
            ResultSet rs = ConsultaDAO.carregaSecretario();
            DefaultTableModel mp = (DefaultTableModel) tb_secretario.getModel();
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            while (rs.next()) {
                int Coluna0 = rs.getInt("id");
                String Coluna1 = rs.getString("nome").trim();
                String Coluna2 = rs.getString("cpf").trim();
                Date date = rs.getDate("dataNasc");
                String Coluna3 = format.format(date);
                String Coluna4 = rs.getString("celular").trim();
                String Coluna5 = rs.getString("rg").trim();
                String Coluna6 = rs.getString("ctps").trim();
                date = rs.getDate("dataadmissao");
                String Coluna7 = format.format(date);
                String Coluna8 = rs.getString("sexo").trim();
                String Coluna9 = rs.getString("endereco").trim();
                mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4, Coluna5, Coluna6, Coluna7, Coluna8, Coluna9});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Solicitação interrompida: " + e, "Preencher item", 2);
        }

        tb_secretario.setAutoCreateRowSorter(true);
    }

    public void atualizarTabVeiculo() {
        DefaultTableModel mp1 = (DefaultTableModel) tb_veiculo.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_veiculo.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_veiculo.getModel();
        for (Veiculo obj : listVei) {
            int Coluna0 = obj.getId();
            String Coluna1 = obj.getPlaca();
            String Coluna2 = obj.getCor();
            String Coluna3 = obj.getModelo();
            int Coluna4 = obj.getValidade();
            int Coluna5 = obj.getAno();
            String Coluna6;
            if (obj.isDocPago()) {
                Coluna6 = "SIM";
            } else {
                Coluna6 = "NÃO";
            }

            String Coluna7 = obj.getTipo();
            String Coluna8 = obj.getRenavam();
            String Coluna9 = obj.getChassi();
            mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4, Coluna5, Coluna6, Coluna7, Coluna8, Coluna9});
        }
        tb_veiculo.setAutoCreateRowSorter(true);
    }

    public void atualizarTabAula() throws SQLException {
        geraListaAula();
        DefaultTableModel mp1 = (DefaultTableModel) tb_aula.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_aula.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_aula.getModel();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        for (Aula obj : listAula) {
            int Coluna0 = obj.getId();
            Date date = obj.getData();
            String Coluna1 = format.format(date);
            String Coluna2 = obj.getHorario();
            Veiculo Coluna3 = obj.getVeiculo();
            Instrutor Coluna4 = obj.getInstrutor();
            ClienteCnh Coluna5 = obj.getCliente();
            String Coluna6;
            if (obj.getConcretizada()) {
                Coluna6 = "SIM";
            } else {
                Coluna6 = "NÃO";
            }

            mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4, Coluna5, Coluna6});
        }

        tb_aula.setAutoCreateRowSorter(true);
    }

    //Editar dados
    public void editarCliente() throws ParseException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            ClienteCnh obj = new ClienteCnh();
            obj.setId(Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_cliente.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_cliente.getValueAt(row, 2).toString().trim());
            obj.setRg(tb_cliente.getValueAt(row, 3).toString().trim());
            obj.setCatPretendida(tb_cliente.getValueAt(row, 4).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_cliente.getValueAt(row, 5).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_cliente.getValueAt(row, 6).toString().trim());
            obj.setSexo(tb_cliente.getValueAt(row, 7).toString().trim());
            obj.setQntAulasPossuidas(Integer.parseInt(tb_cliente.getValueAt(row, 8).toString().trim()));
            obj.setQntAulasFeitas(Integer.parseInt(tb_cliente.getValueAt(row, 9).toString().trim()));
            obj.setOrcamento(Double.parseDouble(tb_cliente.getValueAt(row, 10).toString().trim()));
            obj.setValorPago(Double.parseDouble(tb_cliente.getValueAt(row, 11).toString().trim()));
            if (tb_cliente.getValueAt(row, 12).equals("SIM")) {
                obj.setConcluido(true);
            } else {
                obj.setConcluido(false);
            }

            obj.setEnd(tb_cliente.getValueAt(row, 13).toString().trim());
            date = formatter.parse(tb_cliente.getValueAt(row, 14).toString().trim());
            obj.setDataCadastro(date);
            obj.setFormaPagamento(tb_cliente.getValueAt(row, 15).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void editarInstrutor() throws ParseException {
        int row = tb_instrutor.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            Instrutor obj = new Instrutor();
            obj.setId(Integer.parseInt(tb_instrutor.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_instrutor.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_instrutor.getValueAt(row, 2).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_instrutor.getValueAt(row, 3).toString().trim());
            obj.setDataNasc(date);
            obj.setCredencial(tb_instrutor.getValueAt(row, 4).toString().trim());
            date = formatter.parse(tb_instrutor.getValueAt(row, 5).toString().trim());
            obj.setDataPCnh(date);
            obj.setAulasDadas(Integer.parseInt(tb_instrutor.getValueAt(row, 6).toString()));
            obj.setCelular(tb_instrutor.getValueAt(row, 7).toString().trim());
            obj.setRg(tb_instrutor.getValueAt(row, 8).toString().trim());
            obj.setCtps(tb_instrutor.getValueAt(row, 9).toString().trim());
            date = formatter.parse(tb_instrutor.getValueAt(row, 10).toString().trim());
            obj.setDataAdmissao(date);
            obj.setDiretor(tb_instrutor.getValueAt(row, 11).toString().trim());
            obj.setSexo(tb_instrutor.getValueAt(row, 12).toString().trim());
            obj.setEnd(tb_instrutor.getValueAt(row, 13).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabInstrutor();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void editarSecretario() throws ParseException {
        int row = tb_secretario.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            Secretario obj = new Secretario();
            obj.setId(Integer.parseInt(tb_secretario.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_secretario.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_secretario.getValueAt(row, 2).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_secretario.getValueAt(row, 3).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_secretario.getValueAt(row, 4).toString().trim());
            obj.setRg(tb_secretario.getValueAt(row, 5).toString().trim());
            obj.setCtps(tb_secretario.getValueAt(row, 6).toString().trim());
            date = formatter.parse(tb_secretario.getValueAt(row, 7).toString().trim());
            obj.setDataAdmissao(date);
            obj.setSexo(tb_secretario.getValueAt(row, 8).toString().trim());
            obj.setEnd(tb_secretario.getValueAt(row, 9).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabSecretario();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void editarVeiculo() throws ParseException {
        int row = tb_veiculo.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            Veiculo obj = new Veiculo();
            obj.setId((int) tb_veiculo.getValueAt(row, 0));
            obj.setPlaca(tb_veiculo.getValueAt(row, 1).toString().trim());
            obj.setCor(tb_veiculo.getValueAt(row, 2).toString().trim());
            obj.setModelo(tb_veiculo.getValueAt(row, 3).toString().trim());
            obj.setValidade((int) tb_veiculo.getValueAt(row, 4));
            obj.setAno((int) tb_veiculo.getValueAt(row, 5));
            if (tb_veiculo.getValueAt(row, 6).equals("SIM")) {
                obj.setDocPago(true);
            } else {
                obj.setDocPago(false);
            }
            obj.setTipo(tb_veiculo.getValueAt(row, 7).toString().trim());
            obj.setRenavam(tb_veiculo.getValueAt(row, 8).toString().trim());
            obj.setChassi(tb_veiculo.getValueAt(row, 9).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabVeiculo();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void editarAula() throws ParseException {
        int row = tb_aula.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            Aula obj = new Aula();
            obj.setId((int) tb_aula.getValueAt(row, 0));
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_aula.getValueAt(row, 1).toString().trim());
            obj.setData(date);
            obj.setHorario(tb_aula.getValueAt(row, 2).toString().trim());
            obj.setVeiculo((Veiculo) (tb_aula.getValueAt(row, 3)));
            obj.setInstrutor((Instrutor) (tb_aula.getValueAt(row, 4)));
            obj.setCliente((ClienteCnh) (tb_aula.getValueAt(row, 5)));
            if (tb_aula.getValueAt(row, 6).equals("SIM")) {
                obj.setConcretizada(true);
            } else {
                obj.setConcretizada(false);
            }
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabAula();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    //Excluir Dados
    public void excluirCliente() throws SQLException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            if (0 == JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION)) {
                int id = (Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
                ExcluirDAO edao = new ExcluirDAO();
                edao.ExcluirCliente(id);
                atualizarTabCliente();
            }
        }
    }

    public void excluirInstrutor() throws SQLException {
        int row = tb_instrutor.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            if (0 == JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION)) {

                int id = (Integer.parseInt(tb_instrutor.getValueAt(row, 0).toString().trim()));
                ExcluirDAO edao = new ExcluirDAO();
                edao.ExcluirInstrutor(id);
                atualizarTabInstrutor();
            }
        }
    }

    public void excluirSecretario() throws SQLException {
        int row = tb_secretario.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            if (0 == JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION)) {
                int id = (Integer.parseInt(tb_secretario.getValueAt(row, 0).toString().trim()));
                ExcluirDAO edao = new ExcluirDAO();
                edao.ExcluirSecretario(id);
                atualizarTabSecretario();
            }
        }
    }

    public void excluirVeiculo() throws SQLException {
        int row = tb_veiculo.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            if (0 == JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION)) {
                int id = (Integer.parseInt(tb_veiculo.getValueAt(row, 0).toString().trim()));
                ExcluirDAO edao = new ExcluirDAO();
                edao.ExcluirVeiculo(id);
                atualizarTabVeiculo();
            }
        }
    }

    public void excluirAula() throws SQLException {
        int row = tb_aula.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {
            if (0 == JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION)) {
                int id = (Integer.parseInt(tb_aula.getValueAt(row, 0).toString().trim()));
                ExcluirDAO edao = new ExcluirDAO();
                edao.ExcluirAula(id);
                atualizarTabAula();
            }
        }
    }

    //Comandos específicos do objeto Cliente
    public void adicionarAluguel() throws ParseException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            ClienteCnh obj = new ClienteCnh();
            obj.setId(Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_cliente.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_cliente.getValueAt(row, 2).toString().trim());
            obj.setRg(tb_cliente.getValueAt(row, 3).toString().trim());
            obj.setCatPretendida(tb_cliente.getValueAt(row, 4).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_cliente.getValueAt(row, 5).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_cliente.getValueAt(row, 6).toString().trim());
            obj.setSexo(tb_cliente.getValueAt(row, 7).toString().trim());
            obj.setQntAulasPossuidas(Integer.parseInt(tb_cliente.getValueAt(row, 8).toString().trim()));
            obj.setQntAulasFeitas(Integer.parseInt(tb_cliente.getValueAt(row, 9).toString().trim()));
            obj.setOrcamento(Double.parseDouble(tb_cliente.getValueAt(row, 10).toString().trim()));
            obj.setValorPago(Double.parseDouble(tb_cliente.getValueAt(row, 11).toString().trim()));
            if (tb_aula.getValueAt(row, 12).equals("SIM")) {
                obj.setConcluido(true);
            } else {
                obj.setConcluido(false);
            }
            obj.setEnd(tb_cliente.getValueAt(row, 13).toString().trim());
            date = formatter.parse(tb_cliente.getValueAt(row, 14).toString().trim());
            obj.setDataCadastro(date);
            obj.adicionarAluguel();
            obj.setFormaPagamento(tb_cliente.getValueAt(row, 15).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void debitarCliente(double valor) throws ParseException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            ClienteCnh obj = new ClienteCnh();
            obj.setId(Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_cliente.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_cliente.getValueAt(row, 2).toString().trim());
            obj.setRg(tb_cliente.getValueAt(row, 3).toString().trim());
            obj.setCatPretendida(tb_cliente.getValueAt(row, 4).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_cliente.getValueAt(row, 5).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_cliente.getValueAt(row, 6).toString().trim());
            obj.setSexo(tb_cliente.getValueAt(row, 7).toString().trim());
            obj.setQntAulasPossuidas(Integer.parseInt(tb_cliente.getValueAt(row, 8).toString().trim()));
            obj.setQntAulasFeitas(Integer.parseInt(tb_cliente.getValueAt(row, 9).toString().trim()));
            obj.setOrcamento(Double.parseDouble(tb_cliente.getValueAt(row, 10).toString().trim()));
            obj.setValorPago(Double.parseDouble(tb_cliente.getValueAt(row, 11).toString().trim()));
            if (tb_aula.getValueAt(row, 12).equals("SIM")) {
                obj.setConcluido(true);
            } else {
                obj.setConcluido(false);
            }
            obj.setEnd(tb_cliente.getValueAt(row, 13).toString().trim());
            date = formatter.parse(tb_cliente.getValueAt(row, 14).toString().trim());
            obj.setDataCadastro(date);
            obj.setFormaPagamento(tb_cliente.getValueAt(row, 15).toString().trim());
            if (obj.pagar(valor) == 1) {
                JOptionPane.showMessageDialog(null, "Valor debitado com sucesso!");
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possível debitar.\n ORÇAMENTO EXCEDIDO!", "ERRO", 1);
            }
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void concluirCliente() throws ParseException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            ClienteCnh obj = new ClienteCnh();
            obj.setId(Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_cliente.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_cliente.getValueAt(row, 2).toString().trim());
            obj.setRg(tb_cliente.getValueAt(row, 3).toString().trim());
            obj.setCatPretendida(tb_cliente.getValueAt(row, 4).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_cliente.getValueAt(row, 5).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_cliente.getValueAt(row, 6).toString().trim());
            obj.setSexo(tb_cliente.getValueAt(row, 7).toString().trim());
            obj.setQntAulasPossuidas(0);
            obj.setQntAulasFeitas(Integer.parseInt(tb_cliente.getValueAt(row, 9).toString().trim()));
            obj.setOrcamento(Double.parseDouble(tb_cliente.getValueAt(row, 10).toString().trim()));
            obj.setValorPago(Double.parseDouble(tb_cliente.getValueAt(row, 11).toString().trim()));
            obj.setConcluido(true);
            obj.setEnd(tb_cliente.getValueAt(row, 13).toString().trim());
            date = formatter.parse(tb_cliente.getValueAt(row, 14).toString().trim());
            obj.setDataCadastro(date);
            obj.setFormaPagamento(tb_cliente.getValueAt(row, 15).toString().trim());
            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void adicionarAulas(int aulas) throws ParseException {
        int row = tb_cliente.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Nenhuma linha foi selecionada");
        } else {

            ClienteCnh obj = new ClienteCnh();
            obj.setId(Integer.parseInt(tb_cliente.getValueAt(row, 0).toString().trim()));
            obj.setNome(tb_cliente.getValueAt(row, 1).toString().trim());
            obj.setCpf(tb_cliente.getValueAt(row, 2).toString().trim());
            obj.setRg(tb_cliente.getValueAt(row, 3).toString().trim());
            obj.setCatPretendida(tb_cliente.getValueAt(row, 4).toString().trim());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Date date = formatter.parse(tb_cliente.getValueAt(row, 5).toString().trim());
            obj.setDataNasc(date);
            obj.setCelular(tb_cliente.getValueAt(row, 6).toString().trim());
            obj.setSexo(tb_cliente.getValueAt(row, 7).toString().trim());
            obj.setQntAulasPossuidas(Integer.parseInt(tb_cliente.getValueAt(row, 8).toString().trim()));
            obj.setQntAulasFeitas(Integer.parseInt(tb_cliente.getValueAt(row, 9).toString().trim()));
            obj.setOrcamento(Double.parseDouble(tb_cliente.getValueAt(row, 10).toString().trim()));
            obj.setValorPago(Double.parseDouble(tb_cliente.getValueAt(row, 11).toString().trim()));
            if (tb_aula.getValueAt(row, 12).equals("SIM")) {
                obj.setConcluido(true);
            } else {
                obj.setConcluido(false);
            }
            obj.setEnd(tb_cliente.getValueAt(row, 13).toString().trim());
            date = formatter.parse(tb_cliente.getValueAt(row, 14).toString().trim());
            obj.setDataCadastro(date);
            obj.setFormaPagamento(tb_cliente.getValueAt(row, 15).toString().trim());
            obj.comprarAula(aulas);

            IncluirEditarDAO iedao = new IncluirEditarDAO();
            try {
                iedao.Editar(obj);
                atualizarTabCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

}
