/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import static CodigosAuxiliares.GeraListas.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Objetos.Aula;
import Objetos.ClienteCnh;
import Objetos.Instrutor;
import Objetos.Time;
import Objetos.Veiculo;
import Persistencia.IncluirEditarDAO;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 *
 * @author Pedrinho
 */
public class MarcarAula extends javax.swing.JFrame {

    /**
     * Creates new form CadastroAula
     *
     * @throws java.sql.SQLException
     */
    Date hoje = new Date();

    public MarcarAula() throws SQLException {
        initComponents();
        this.setExtendedState(MarcarAula.MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        atualizarTabInstrutor();
        atualizarTabCliente();
        geraListaAula();
        geraListaCli();
        geraListaInst();
        preencherHorario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_cliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_veiculo = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_instrutor = new javax.swing.JTable();
        bt_marcaAula = new javax.swing.JButton();
        dt_data = new com.toedter.calendar.JCalendar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bt_quadro = new javax.swing.JButton();
        bt_sair = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cbx_horario = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Marcador de aula");

        jPanel1.setLayout(null);

        tb_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Cat Pretendida", "Aulas Restantes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_cliente.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_cliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_cliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_cliente.setShowHorizontalLines(true);
        tb_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_clienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_cliente);
        if (tb_cliente.getColumnModel().getColumnCount() > 0) {
            tb_cliente.getColumnModel().getColumn(0).setResizable(false);
            tb_cliente.getColumnModel().getColumn(1).setPreferredWidth(250);
            tb_cliente.getColumnModel().getColumn(2).setPreferredWidth(150);
            tb_cliente.getColumnModel().getColumn(3).setPreferredWidth(107);
            tb_cliente.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 50, 610, 250);

        tb_veiculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Placa", "Modelo", "Cor", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_veiculo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_veiculo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_veiculo.setShowHorizontalLines(true);
        jScrollPane2.setViewportView(tb_veiculo);
        if (tb_veiculo.getColumnModel().getColumnCount() > 0) {
            tb_veiculo.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(660, 50, 640, 250);

        tb_instrutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Celular"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_instrutor.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tb_instrutor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_instrutor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_instrutor.setShowGrid(true);
        jScrollPane3.setViewportView(tb_instrutor);
        if (tb_instrutor.getColumnModel().getColumnCount() > 0) {
            tb_instrutor.getColumnModel().getColumn(0).setResizable(false);
            tb_instrutor.getColumnModel().getColumn(1).setPreferredWidth(130);
        }

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(30, 340, 610, 220);

        bt_marcaAula.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_marcaAula.setText("Marcar Aula");
        bt_marcaAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_marcaAulaActionPerformed(evt);
            }
        });
        jPanel1.add(bt_marcaAula);
        bt_marcaAula.setBounds(980, 630, 150, 40);

        dt_data.setMinSelectableDate(hoje);
        jPanel1.add(dt_data);
        dt_data.setBounds(660, 340, 480, 250);

        jLabel1.setText("Selecione o Dia da aula");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(660, 310, 190, 30);

        jLabel2.setText("Selecione o Instrutor");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 310, 130, 30);

        jLabel3.setText("Selecione o Veículo");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(660, 20, 130, 30);

        bt_quadro.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bt_quadro.setText("Verificar Quadro de Horário");
        bt_quadro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_quadroActionPerformed(evt);
            }
        });
        jPanel1.add(bt_quadro);
        bt_quadro.setBounds(760, 630, 200, 40);

        bt_sair.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bt_sair.setText("Sair");
        bt_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sairActionPerformed(evt);
            }
        });
        jPanel1.add(bt_sair);
        bt_sair.setBounds(1150, 630, 130, 40);

        jLabel5.setText("Selecione o Aluno");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(30, 20, 130, 30);
        jPanel1.add(cbx_horario);
        cbx_horario.setBounds(1180, 340, 120, 30);

        jLabel4.setText("Selecione o horário");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(1180, 310, 120, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1313, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_marcaAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_marcaAulaActionPerformed
        // TODO add your handling code here:

        switch (conflitoAula()) {
            case 1 ->
                JOptionPane.showMessageDialog(null, "Cliente já possui aula nesse horário!", "Aula NÃO marcada", 2);
            case 2 ->
                JOptionPane.showMessageDialog(null, "Instrutor já possui aula nesse horário!", "Aula NÃO marcada", 2);
            case 3 ->
                JOptionPane.showMessageDialog(null, "Veículo já possui aula nesse horário!", "Aula NÃO marcada", 2);
            case 4 ->
                JOptionPane.showMessageDialog(null, "Selecione todas as opções para prosseguir", "Aula NÃO marcada", 2);
            case 5 ->
                JOptionPane.showMessageDialog(null, "Máximo de motos por instrutor excedido", "Aula NÃO marcada", 2);
            default -> {
                GregorianCalendar gc = new GregorianCalendar();
                Date day = dt_data.getDate();
                gc.setTime(day);
                int today = gc.get(GregorianCalendar.DAY_OF_WEEK);
                if (today == 1) {
                    JOptionPane.showMessageDialog(null, "A aula não pode ser marcada no domingo", "ERRO!", 1);

                } else {
                    IncluirEditarDAO iedao = new IncluirEditarDAO();
                    int row = tb_cliente.getSelectedRow();
                    int idCliente = (int) (tb_cliente.getValueAt(row, 0));
                    ClienteCnh objCli = null;
                    for (ClienteCnh cliAux : listCli) {
                        if (idCliente == cliAux.getId()) {
                            objCli = cliAux;
                        }
                    }
                    row = tb_instrutor.getSelectedRow();
                    int idInstrutor = (int) (tb_instrutor.getValueAt(row, 0));
                    Instrutor objInst = null;
                    for (Instrutor instAux : listInst) {
                        if (idInstrutor == instAux.getId()) {
                            objInst = instAux;
                            break;
                        }
                    }
                    row = tb_veiculo.getSelectedRow();
                    int idVeiculo = (int) (tb_veiculo.getValueAt(row, 0));
                    Veiculo objVei = null;
                    for (Veiculo veiAux : listVei) {
                        if (idVeiculo == veiAux.getId()) {
                            objVei = veiAux;
                            break;
                        }
                    }
                    Aula aula = new Aula();
                    aula.setCliente(objCli);
                    aula.setInstrutor(objInst);
                    aula.setVeiculo(objVei);
                    aula.setData(day);
                    aula.setHorario( cbx_horario.getSelectedItem().toString());
                    try {
                        if (objCli.fazerAula() == 1) {
                            iedao.Incluir(aula);
                            iedao.Editar(objCli);
                            geraListaAula();
                            geraListaCli();
                            atualizarTabCliente();
                            JOptionPane.showMessageDialog(null, "Aula marcada com sucesso!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Aluno não possui aulas");
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, ex, "ERRO!", 1);
                    }

                }
            }

        }
    }//GEN-LAST:event_bt_marcaAulaActionPerformed

    private void bt_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sairActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_bt_sairActionPerformed

    private void bt_quadroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_quadroActionPerformed
        // TODO add your handling code here:
        Quadro quadro = new Quadro();
        quadro.setVisible(true);
    }//GEN-LAST:event_bt_quadroActionPerformed

    private void tb_clienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_clienteMouseClicked
        // TODO add your handling code here:
        String categoria = (String) tb_cliente.getValueAt(tb_cliente.getSelectedRow(), 3);
        String aux;
        switch (categoria) {
            case "MOTO INICIAL" ->
                aux = "MOTO";
            case "MOTO ADIÇÃO" ->
                aux = "MOTO";
            case "CARRO INICIAL" ->
                aux = "CARRO";
            case "CARRO ADIÇÃO" ->
                aux = "CARRO";
            case "CARRO E MOTO" ->
                aux = "CARRO E MOTO";
            default -> {
                aux = "ÔNIBUS";
            }
        }
        try {
            atualizarTabVeiculo(aux);
        } catch (SQLException ex) {
            Logger.getLogger(MarcarAula.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tb_clienteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MarcarAula().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(MarcarAula.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_marcaAula;
    private javax.swing.JButton bt_quadro;
    private javax.swing.JButton bt_sair;
    private javax.swing.JComboBox<Time> cbx_horario;
    private com.toedter.calendar.JCalendar dt_data;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tb_cliente;
    private javax.swing.JTable tb_instrutor;
    private javax.swing.JTable tb_veiculo;
    // End of variables declaration//GEN-END:variables

    public void atualizarTabCliente() {
        DefaultTableModel mp1 = (DefaultTableModel) tb_cliente.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_cliente.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_cliente.getModel();
        for (ClienteCnh obj : listCli) {
            int Coluna0 = obj.getId();
            String Coluna1 = obj.getNome();
            String Coluna2 = obj.getCpf();
            String Coluna3 = obj.getCatPretendida();
            int Coluna4 = obj.getQntAulasPossuidas();

            mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4});
        }

        tb_cliente.setAutoCreateRowSorter(true);
    }

    public void atualizarTabInstrutor() {
        DefaultTableModel mp1 = (DefaultTableModel) tb_instrutor.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_instrutor.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_instrutor.getModel();
        for (Instrutor obj : listInst) {
            int Coluna0 = obj.getId();
            String Coluna1 = obj.getNome();
            String Coluna2 = obj.getCpf();
            String Coluna3 = obj.getCelular();

            mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3});
        }
        tb_instrutor.setAutoCreateRowSorter(true);
    }

    public void atualizarTabVeiculo(String categoria) throws SQLException {
        geraListaVei();
        DefaultTableModel mp1 = (DefaultTableModel) tb_veiculo.getModel();
        int l = mp1.getRowCount();
        if (l > 0) {
            while (l > 0) {
                ((DefaultTableModel) tb_veiculo.getModel()).removeRow(l - 1);
                l--;
            }
        }
        DefaultTableModel mp = (DefaultTableModel) tb_veiculo.getModel();
        for (Veiculo obj : listVei) {
            String Coluna4 = obj.getTipo();
            if (categoria.equals("CARRO E MOTO")) {
                if (!Coluna4.equals("ÔNIBUS")) {
                    int Coluna0 = obj.getId();
                    String Coluna1 = obj.getPlaca();
                    String Coluna2 = obj.getModelo();
                    String Coluna3 = obj.getCor();
                    mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4});
                }
            } else if (categoria.equals(Coluna4)) {
                int Coluna0 = obj.getId();
                String Coluna1 = obj.getPlaca();
                String Coluna2 = obj.getModelo();
                String Coluna3 = obj.getCor();
                mp.addRow(new Object[]{Coluna0, Coluna1, Coluna2, Coluna3, Coluna4});
            }
        }
        tb_veiculo.setAutoCreateRowSorter(true);
    }

    public int conflitoAula() {
        int rowC = tb_cliente.getSelectedRow();
        int rowI = tb_instrutor.getSelectedRow();
        int rowV = tb_veiculo.getSelectedRow();
        if (rowC < 0 || rowI < 0 || rowV < 0) {
            return 4;
        } else {
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            Date marcarDt = dt_data.getDate();
            String marcarDtAux = format.format(marcarDt);
            String marcarHr = cbx_horario.getSelectedItem().toString();
            int idInstrutor = (int) (tb_instrutor.getValueAt(rowI, 0));
            int idCliente = (int) (tb_cliente.getValueAt(rowC, 0));
            int idVeiculo = (int) (tb_veiculo.getValueAt(rowV, 0));
            String tipoVei = (String) (tb_veiculo.getValueAt(rowV, 4));
            int cont = 0;
            for (Aula aula : listAula) {
                String horario = aula.getHorario();
                Date data = aula.getData();
                String dataAux = format.format(data);
                if (dataAux.equals(marcarDtAux)) {
                    if (horario.equals(marcarHr)) {
                        if (idCliente == aula.getCliente().getId()) {
                            return 1;
                        } else if (idVeiculo == aula.getVeiculo().getId()) {
                            return 3;
                        } else if (idInstrutor == aula.getInstrutor().getId()) {
                            if (tipoVei.equals("MOTO")) {
                                cont++;
                            } else {
                                return 2;
                            }
                        }

                    }
                }
            }
            if(cont > 2){
                return 5;
            }
            return 0;
        }
    }
    
    public void preencherHorario(){
        geraListaHorario();
        for (Time hora: listHorario) {
            cbx_horario.addItem(hora);
        }
    }
    

}
